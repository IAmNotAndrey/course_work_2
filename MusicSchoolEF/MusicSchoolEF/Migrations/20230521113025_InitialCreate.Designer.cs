// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using MusicSchoolAsp.Models.Db;

#nullable disable

namespace MusicSchoolAsp.Migrations
{
    [DbContext(typeof(Ms2Context))]
    [Migration("20230521113025_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("utf8_general_ci")
                .HasAnnotation("ProductVersion", "7.0.5")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.HasCharSet(modelBuilder, "utf8");

            modelBuilder.Entity("MusicSchoolEF.Models.Group", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("groups", (string)null);
                });

            modelBuilder.Entity("MusicSchoolEF.Models.Node", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("Description")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("description");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.Property<uint>("Owner")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("owner");

                    b.Property<uint?>("Parent")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("parent");

                    b.Property<uint>("Priority")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("priority");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Owner" }, "nodes_fk0");

                    b.HasIndex(new[] { "Parent" }, "nodes_fk1");

                    b.ToTable("nodes", (string)null);
                });

            modelBuilder.Entity("MusicSchoolEF.Models.Role", b =>
                {
                    b.Property<string>("Name")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("name");

                    b.HasKey("Name")
                        .HasName("PRIMARY");

                    b.ToTable("roles", (string)null);
                });

            modelBuilder.Entity("MusicSchoolEF.Models.StudentNodeConnection", b =>
                {
                    b.Property<uint>("Node")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("node");

                    b.Property<uint>("Student")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("student");

                    b.Property<string>("Comment")
                        .HasMaxLength(5000)
                        .HasColumnType("varchar(5000)")
                        .HasColumnName("comment");

                    b.Property<int?>("Mark")
                        .HasColumnType("int(11)")
                        .HasColumnName("mark");

                    b.HasKey("Node", "Student")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Student" }, "student_node_connections_fk1");

                    b.ToTable("student_node_connections", (string)null);
                });

            modelBuilder.Entity("MusicSchoolEF.Models.User", b =>
                {
                    b.Property<uint>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("id");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("first_name");

                    b.Property<string>("Login")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("login");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("password");

                    b.Property<string>("Patronymic")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("patronymic");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("varchar(255)")
                        .HasColumnName("role");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)")
                        .HasColumnName("surname");

                    b.HasKey("Id")
                        .HasName("PRIMARY");

                    b.HasIndex(new[] { "Login" }, "login")
                        .IsUnique();

                    b.HasIndex(new[] { "Role" }, "users_fk0");

                    b.ToTable("users", (string)null);
                });

            modelBuilder.Entity("StudentGroupConnection", b =>
                {
                    b.Property<uint>("Student")
                        .HasColumnType("int(10) unsigned")
                        .HasColumnName("student");

                    b.Property<string>("Group")
                        .HasColumnType("varchar(255)")
                        .HasColumnName("group");

                    b.HasKey("Student", "Group")
                        .HasName("PRIMARY")
                        .HasAnnotation("MySql:IndexPrefixLength", new[] { 0, 0 });

                    b.HasIndex(new[] { "Group" }, "student_group_connections_fk1");

                    b.ToTable("student_group_connections", (string)null);
                });

            modelBuilder.Entity("MusicSchoolEF.Models.Node", b =>
                {
                    b.HasOne("MusicSchoolEF.Models.User", "OwnerNavigation")
                        .WithMany("Nodes")
                        .HasForeignKey("Owner")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("nodes_fk0");

                    b.HasOne("MusicSchoolEF.Models.Node", "ParentNavigation")
                        .WithMany("InverseParentNavigation")
                        .HasForeignKey("Parent")
                        .OnDelete(DeleteBehavior.Cascade)
                        .HasConstraintName("nodes_fk1");

                    b.Navigation("OwnerNavigation");

                    b.Navigation("ParentNavigation");
                });

            modelBuilder.Entity("MusicSchoolEF.Models.StudentNodeConnection", b =>
                {
                    b.HasOne("MusicSchoolEF.Models.Node", "NodeNavigation")
                        .WithMany("StudentNodeConnections")
                        .HasForeignKey("Node")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_node_connections_fk0");

                    b.HasOne("MusicSchoolEF.Models.User", "StudentNavigation")
                        .WithMany("StudentNodeConnections")
                        .HasForeignKey("Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_node_connections_fk1");

                    b.Navigation("NodeNavigation");

                    b.Navigation("StudentNavigation");
                });

            modelBuilder.Entity("MusicSchoolEF.Models.User", b =>
                {
                    b.HasOne("MusicSchoolEF.Models.Role", "RoleNavigation")
                        .WithMany("Users")
                        .HasForeignKey("Role")
                        .IsRequired()
                        .HasConstraintName("users_fk0");

                    b.Navigation("RoleNavigation");
                });

            modelBuilder.Entity("StudentGroupConnection", b =>
                {
                    b.HasOne("MusicSchoolEF.Models.Group", null)
                        .WithMany()
                        .HasForeignKey("Group")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_group_connections_fk1");

                    b.HasOne("MusicSchoolEF.Models.User", null)
                        .WithMany()
                        .HasForeignKey("Student")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("student_group_connections_fk0");
                });

            modelBuilder.Entity("MusicSchoolEF.Models.Node", b =>
                {
                    b.Navigation("InverseParentNavigation");

                    b.Navigation("StudentNodeConnections");
                });

            modelBuilder.Entity("MusicSchoolEF.Models.Role", b =>
                {
                    b.Navigation("Users");
                });

            modelBuilder.Entity("MusicSchoolEF.Models.User", b =>
                {
                    b.Navigation("Nodes");

                    b.Navigation("StudentNodeConnections");
                });
#pragma warning restore 612, 618
        }
    }
}
